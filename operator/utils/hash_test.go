// SPDX-FileCopyrightText: the secureCodeBox authors
//
// SPDX-License-Identifier: Apache-2.0

package utils

import (
	"fmt"
	"testing"

	"github.com/stretchr/testify/assert"

	executionv1 "github.com/secureCodeBox/secureCodeBox/operator/apis/execution/v1"
	batchv1 "k8s.io/api/batch/v1"
	corev1 "k8s.io/api/core/v1"
	v1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

var scanType executionv1.ScanType = executionv1.ScanType{
	ObjectMeta: metav1.ObjectMeta{
		Name:      "nmap",
		Namespace: "default",
	},
	Spec: executionv1.ScanTypeSpec{
		ExtractResults: executionv1.ExtractResults{
			Type:     "nmap-xml",
			Location: "/home/securecodebox/nmap-results.xml",
		},
		JobTemplate: batchv1.Job{
			Spec: batchv1.JobSpec{
				Template: v1.PodTemplateSpec{
					Spec: corev1.PodSpec{
						Containers: []corev1.Container{
							{
								Name:  "foobar",
								Image: "securecodebox/scanner-nmap:7.91-r0",
								Command: []string{
									"nmap",
									"-oX",
									"/home/securecodebox/nmap-results.xml",
								},
							},
						},
					},
				},
				TTLSecondsAfterFinished: nil,
			},
		},
	}}

// Tests that getAnnotationsForScan drops all annotations not prefixed with "*.securecodebox.io/*"
func TestScanTypeHashing(t *testing.T) {
	hashValues := HashScanType(scanType)

	fmt.Printf("Hash: %d", hashValues)

	assert.Equal(
		t,
		uint64(0x2e78bbefed51ff8),
		hashValues,
		"Should hash scantype consistently",
	)
}

func TestScanTypeHashingIgnoresNonScbAnnotations(t *testing.T) {
	originalScanType := scanType.DeepCopy()
	originalScanType.ObjectMeta.Annotations = map[string]string{
		"foo.example.com/bar": "54165165135",
	}

	modifiedScantype := scanType.DeepCopy()
	modifiedScantype.ObjectMeta.Annotations = map[string]string{
		"foo.example.com/bar": "719839183223",
	}

	assert.Equal(
		t,
		HashScanType(*originalScanType),
		HashScanType(*modifiedScantype),
		"Should ignore non scb annotation on the scantypes",
	)
}

func TestScanTypeHashingIncludesScbAnnotations(t *testing.T) {
	originalScanType := scanType.DeepCopy()
	originalScanType.ObjectMeta.Annotations = map[string]string{
		"foo.example.com/bar":                           "54165165135",
		"auto-discovery.securecodebox.io/scantype-hash": "same-hash",
	}

	modifiedScantype := scanType.DeepCopy()
	modifiedScantype.ObjectMeta.Annotations = map[string]string{
		"foo.example.com/bar":                           "719839183223",
		"auto-discovery.securecodebox.io/scantype-hash": "other-hash",
	}

	assert.NotEqual(
		t,
		HashScanType(*originalScanType),
		HashScanType(*modifiedScantype),
		"Should not equal as hash should include *.securecodebox.io/* annotations",
	)
}

func TestScanTypeHashingIgnoresNonScbLabels(t *testing.T) {
	originalScanType := scanType.DeepCopy()
	originalScanType.ObjectMeta.Labels = map[string]string{
		"foo.example.com/bar": "54165165135",
	}

	modifiedScantype := scanType.DeepCopy()
	modifiedScantype.ObjectMeta.Labels = map[string]string{
		"foo.example.com/bar": "719839183223",
	}

	assert.Equal(
		t,
		HashScanType(*originalScanType),
		HashScanType(*modifiedScantype),
		"Should ignore non scb labels on the scantypes",
	)
}

func TestScanTypeHashingIncludesScbLabels(t *testing.T) {
	originalScanType := scanType.DeepCopy()
	originalScanType.ObjectMeta.Labels = map[string]string{
		"foo.example.com/bar":                           "54165165135",
		"auto-discovery.securecodebox.io/scantype-hash": "same-hash",
	}

	modifiedScantype := scanType.DeepCopy()
	modifiedScantype.ObjectMeta.Labels = map[string]string{
		"foo.example.com/bar":                           "719839183223",
		"auto-discovery.securecodebox.io/scantype-hash": "other-hash",
	}

	assert.NotEqual(
		t,
		HashScanType(*originalScanType),
		HashScanType(*modifiedScantype),
		"Should not equal as hash should include *.securecodebox.io/* labels",
	)
}

func TestShouldIgnoreAutoGeneratedAttributes(t *testing.T) {

	modifiedScantype := scanType.DeepCopy()

	modifiedScantype.ResourceVersion = "ajbsdiavof1t2hvasjhdvaj"

	assert.Equal(
		t,
		HashScanType(scanType),
		HashScanType(*modifiedScantype),
		"Should ignore auto generated attributes",
	)
}
